group 'org.usfirst.frc.team4373'
version '1.0'

import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.7.0'
    }
}
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'
//apply plugin: 'checkstyle'
apply plugin: 'org.hidetake.ssh'


def robotClass = 'org.usfirst.frc.team4373.robot.Robot'

repositories {
    mavenCentral()
    maven { url 'http://first.wpi.edu/FRC/roborio/maven/development' }
    maven { url 'https://raw.githubusercontent.com/Roobotics-FRC/RooMaven/master' }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile(
            'edu.wpi.first.wpilib.networktables.java:NetworkTables:3.0.0-SNAPSHOT',
            'edu.wpi.first.wpilibj:wpilibJavaFinal:0.1.0-SNAPSHOT',
            'com.ctr-electronics:TalonSRXLibJava:4.4.1.8'
    )
}

//checkstyle {
//    //noinspection GroovyAssignabilityCheck
//    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
//    toolVersion = '7.1.2'
//}


remotes {
    roborioStandard {
        role 'masterNode'
        host = 'roborio-4373-frc.local'
        user = 'lvuser'
    }
    roborioAdmin {
        host = 'roborio-4373-frc.local'
        user = 'admin'
    }
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'edu.wpi.first.wpilibj.RobotBase',
                'Robot-Class': robotClass
        )
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

//noinspection GroovyAssignabilityCheck
task deploy(dependsOn: ':build') << {
    def isMacOS = OperatingSystem.current().isMacOsX()
    def network = ''
    if (isMacOS) {
        Process curNetProc = Runtime.getRuntime().exec('networksetup -getairportnetwork en0')
        BufferedReader stdInput = new BufferedReader(new InputStreamReader(curNetProc.getInputStream()))
        String res = stdInput.readLine()
        network = res.substring(23)
        curNetProc.waitFor()
        if (network != '4373_') {
            Process setProc = Runtime.getRuntime().exec('networksetup -setairportnetwork en0 4373_ robotics')
            setProc.waitFor()
        }
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
    ssh.run{
        session(remotes.roborioAdmin) {
            put from: fileTree(dir: gradle.wpilibLibDir), into: '/usr/local/frc/lib'
            execute "killall -q netconsole-host || :"
            put from: "${gradle.wpilibAntDir}/netconsole-host", into: '/usr/local/frc/bin'
            execute "chmod a+x /usr/local/frc/bin/netconsole-host"
        }
    }
    ssh.run {
        session(remotes.roborioStandard) {
            put from: files(jar.getArchivePath().absolutePath), into: '/home/lvuser/FRCUserProgram.jar'
            execute "echo '/usr/local/frc/bin/netconsole-host /usr/local/frc/JRE/bin/java -Djava.library.path=/usr/local/frc/lib/ -jar /home/lvuser/FRCUserProgram.jar' > robotCommand && chmod +x robotCommand"
            execute ". /etc/profile.d/natinst-path.sh; /usr/local/frc/bin/frcKillRobot.sh -t -r"
            execute "sync"
        }
    }
    if (isMacOS && network != '4373_') {
        Process resetProc = Runtime.getRuntime().exec('networksetup -setairportnetwork en0 ' + network)
        resetProc.waitFor()
    }
}